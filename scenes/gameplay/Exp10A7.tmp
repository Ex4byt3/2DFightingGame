[gd_scene load_steps=8 format=3 uid="uid://bmd5v532i0bxi"]

[ext_resource type="Texture2D" uid="uid://c2r3huwwoc7vr" path="res://assets/gameplay/explosion.png" id="1"]
[ext_resource type="Script" path="res://scripts/gameplay/Explosion.gd" id="3"]
[ext_resource type="Script" path="res://addons/godot-rollback-netcode/NetworkTimer.gd" id="3_sj2fv"]

[sub_resource type="Animation" id="1"]
resource_name = "Explode"
length = 0.45
step = 0.05
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1, 1, 1, 1, 1),
"update": 1,
"values": [0, 1, 2, 3, 4, 5, 6, 7, 8]
}

[sub_resource type="Animation" id="2"]
length = 0.001
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [0]
}

[sub_resource type="AnimationLibrary" id="AnimationLibrary_qnfvo"]
_data = {
"Explode": SubResource("1"),
"RESET": SubResource("2")
}

[sub_resource type="GDScript" id="GDScript_rdx3e"]
script/source = "extends AnimationPlayer
class_name NetworkAnimationPlayer

@export var auto_reset := true

func _ready() -> void:
	method_call_mode = AnimationMixer.ANIMATION_METHOD_CALL_IMMEDIATE
	playback_process_mode = AnimationMixer.ANIMATION_PROCESS_MANUAL
	add_to_group('network_sync')

func _network_process(input: Dictionary) -> void:
	if is_playing():
		advance(SyncManager.tick_time)

func _save_state() -> Dictionary:
	if is_playing() and (not auto_reset or current_animation != 'RESET'):
		return {
			is_playing = true,
			current_animation = current_animation,
			current_position = current_animation_position,
			current_speed = speed_scale,
		}
	else:
		return {
			is_playing = false,
			current_animation = '',
			current_position = 0.0,
			current_speed = 1
		}

func _load_state(state: Dictionary) -> void:
	if state['is_playing']:
		if not is_playing() or current_animation != state['current_animation']:
			play(state['current_animation'])
		seek(state['current_position'], true)
		speed_scale = state['current_speed']
	elif is_playing():
		if auto_reset and has_animation(\"RESET\"):
			play(\"RESET\")
		else:
			stop()
"

[node name="Explosion" type="SGFixedNode2D"]
script = ExtResource("3")

[node name="Sprite2D" type="Sprite2D" parent="."]
position = Vector2(0, -9)
texture = ExtResource("1")
hframes = 9

[node name="NetworkAnimationPlayer" type="AnimationPlayer" parent="."]
libraries = {
"": SubResource("AnimationLibrary_qnfvo")
}
script = SubResource("GDScript_rdx3e")

[node name="DespawnTimer" type="Node" parent="."]
script = ExtResource("3_sj2fv")

[connection signal="timeout" from="DespawnTimer" to="." method="_on_despawn_timer_timeout"]
